package com.copium;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class RustFile {

    public final String name;
    public final List<Function> functions;

    public RustFile(String name) {
        this.name = name;
        this.functions = new ArrayList<>();
    }

    public void write() {
        try {
            try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(this.name))) {
                writer.write("// Generated by BallsReader (Rust but Java Syntax)\n\n");

                for (Function function : this.functions) {
                    StringBuilder rsFunction = new StringBuilder("fn " + function.name + "(");
                    for (MethodArg argument : function.arguments) {
                        rsFunction.append(argument.name).append(": ").append(argument.type);
                    }
                    rsFunction.append(") {\n");
                    for (InvokeMethodStatement statement : function.statements) {
                        rsFunction.append("\t").append(statement.functionName);
                        if (statement.isMacro) {
                            rsFunction.append("!");
                        }
                        rsFunction.append("(");
                        for (int i = 0; i < statement.arguments.size(); i++) {
                            rsFunction.append(statement.arguments.get(i));

                            if (i != statement.arguments.size() - 1) {
                                // Not last arg, Add a comma.
                                rsFunction.append(", ");
                            }
                        }
                        rsFunction.append(");\n").append("}\n");
                    }

                    writer.write(rsFunction.toString());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
