package com.copium;

import com.copium.type.Function;
import com.copium.type.statements.InvokeMethodStatement;
import com.copium.type.MethodArg;
import com.copium.type.statements.Statement;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class RustFile {

    public final String name;
    public final List<Function> functions;

    public RustFile(String name) {
        this.name = name;
        this.functions = new ArrayList<>();
    }

    public void write() {
        try {
            try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(this.name))) {
                writer.write("// Generated by BallsReader (Rust but Java Syntax)\n\n");

                for (Function function : this.functions) {
                    StringBuilder rsFunction = new StringBuilder("fn " + function.name + "(");

                    // Method Arguments
                    for (MethodArg argument : function.arguments) {
                        argument.write(rsFunction);

                        if (function.arguments.get(function.arguments.size() - 1) != argument) {
                            rsFunction.append(", ");
                        }
                    }
                    rsFunction.append(") {\n");

                    // Method Body (Statements)
                    for (Statement statement : function.statements) {
                        rsFunction.append("\t");
                        statement.write(rsFunction);
                    }

                    rsFunction.append("}\n");
                    writer.write(rsFunction.toString());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
